import UIKit

/**
*	@brief  基本运算
*/

// +
var n1 = 1
var n2 = 1 + n1		// 2

// - 
var n3 = n2 - n1	// 1

// *
var n4 = n1 * n2	// 2

// /
var n5 = n4 / n2	// 1

// ++
var n6 = n5++	// 1
var n7 = ++n5	// 3

// --
var n8 = n7--	// 3
var n9 = --n7	// 1

// ??
var n10 :Int?		// nil
var n11 = n10 ?? 1	// 1
/*
Swift中的??类似于C语言中的 ?:
上面的写法类似于：
int a = 0；
int b = (a != 0) ?? a : 1
*/

// %
let n12 = 4 % 3	// 1
/*
+---+---+---+---+
| 1 | 2 | 3 | 4 |
+---+---+---+---+
|     3     | 1 |
+-----------+---+
*/

let n13 = 3 % 1.2	// 0.6
/*
+-----+-----+-----+
|  1  |  2  |  3  |
+-----+-----+-----+
| 1.2  | 1.2  |0.6|
+-----------------+
*/

// 逻辑运算
let l1 :Bool = 1 == 2	// false
let l2 = !l1			// true
let l3 = l1 && l2		// false
let l4 = l1 || l2		// true

// 逻辑运算依然存在短路效应
var l5 = 0, l6 = 0
let l7 = false || (++l5 == 1)	// true, l5 = 1
let l8 = false && (++l6 == 1)	// false, l6 = 0




